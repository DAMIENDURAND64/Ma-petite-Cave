generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  wines         Wine[]
  WineDrunk     WineDrunk[]
}

model Wine {
  id          Int       @id @default(autoincrement())
  name        String
  producer    String
  varietal    String[]
  country     String
  region      String
  vintage     Int
  purchasedAt DateTime?
  consumedAt  DateTime?
  consumed    Boolean   @default(false)

  description        String?
  image              String?
  servingTemperature String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  ownerId            String
  wineColorId        Int
  owner              User          @relation(fields: [ownerId], references: [id])
  wineColor          Color         @relation(fields: [wineColorId], references: [id])
  wineBottles        WineBottle[]
  tastingNotes       TastingNote[] @relation("TastingNoteToWine")
  WineDrunk          WineDrunk[]
}

model WineDrunk {
  id        Int      @id @default(autoincrement())
  wineId    Int
  userId    String
  comment   String
  date      DateTime
  format    String
  location  String
  with      String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wine      Wine     @relation(fields: [wineId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Color {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wines     Wine[]
}

model BottleFormat {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  capacity    String
  wineBottles WineBottle[]
}

model TastingNote {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wines     Wine[]   @relation("TastingNoteToWine")
}

model WineBottle {
  id        Int          @id @default(autoincrement())
  wineId    Int
  formatId  Int
  quantity  Int
  price     Float
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  format    BottleFormat @relation(fields: [formatId], references: [id])
  wine      Wine         @relation(fields: [wineId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
